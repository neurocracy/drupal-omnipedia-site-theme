// -----------------------------------------------------------------------------
//   Scrollbar hide partial
// -----------------------------------------------------------------------------

@use 'sass:color';
@use 'sass/helpers/colour';
@use 'sass/helpers/selector';
@use 'sass/variables/motion';
@use '../variables/colours';

// The scrollbar hiding consists of 3 required elements and 2 optional elements.
//
// Required:
//
// - The container: as the name implies, this contains everything else; it is
//   not scrollable itself but acts to clip and thus hide the scrollbar.
//
// - The scroller: this is a child of the container that's scrollable, with a
//   visible scrollbar when interacted with.
//
// - The children: children of the scroller; these have padding applied to the
//   edge where the scrollbar exists to ensure contents don't shift when the
//   scrollbar is shown or hidden, if the scrollbar takes up any space.
//
// Optional:
//
// - Fade elements: these two create a gradient overlay that fades the contents
//   of the scroller on the scrolling axis; these should be children of the
//   container but siblings to the scroller; generated content is recommended
//   for these, i.e. ::before and ::after.

///
/// Scrollbar hide: transition duration.
///
/// This is how long it takes the scrollbars to transition into or out of view.
///
$transition-duration: 200ms;

///
/// Scrollbar hide: extra space.
///
/// This is a small amount of extra space to account for sub-pixel rounding
/// errors, i.e. to prevent the edge of the scrollbar being visible when hidden.
///
$extra-space: 1px;

///
/// Scrollbar hide: get the scroller edge from provided text direction.
///
/// @param {String} $direction
///   The text direction. Must be one of 'ltr' or 'rtl'.
///
/// @return {String}
///   Either 'left' or 'right'.
///
@function scrollbar-edge-from-text-dir($direction) {

  @if ($direction == ltr) {
    @return right;

  } @else if ($direction == rtl) {
    @return left;
  }

}

///
/// Scrollbar hide: get fade element gradient.
///
/// @param {String} $direction
///   The gradient direction.
///
/// @param {Color} $background-colour
///   The background colour to fade.
///
/// @link https://github.com/larsenwork/postcss-easing-gradients
///   PostCSS Easing Gradients plug-in.
///
/// @link https://ambientimpact.com/web/snippets/safari-bug-with-gradients-that-fade-to-transparent
///   Explanation of why we use the background colour with zero opacity instead
///   of 'transparent'.
///
/// @require {variable} motion.$easing-accelerate
///
@function gradient($direction, $background-colour) {
  @return linear-gradient(
    to #{$direction},
    #{$background-colour},
    #{motion.$easing-accelerate},
    #{color.adjust($background-colour, $alpha: -1)}
  );
}

///
/// Scrollbar hide: container base styles.
///
/// @require {variable} motion.$easing-accelerate
/// @require {variable} motion.$easing-decelerate
/// @require {variable} $transition-duration
///
@mixin container {

  --scrollbar-hide-transition-duration: #{$transition-duration};
  --scrollbar-hide-easing-showing:      #{motion.$easing-decelerate};
  --scrollbar-hide-easing-hiding:       #{motion.$easing-accelerate};

  --scrollbar-hide-fade-distance: 2em;

  // Required to correctly position the gradient fade in/out elements.
  position: relative;

  // Required to be able to hide the scrollbars in the horizontal overflow.
  overflow-x: hidden;

}

///
/// Scrollbar hide: scroller element base styles.
///
/// @require {mixin} scroller-directional
///
@mixin scroller {

  overflow-y: auto;

  // Reset ambientimpact_base so that this can exceed 100% width.
  max-width: none;

  @include scroller-directional(ltr);
  @include scroller-directional(rtl);

  transition-duration:        var(--scrollbar-hide-transition-duration);
  transition-timing-function: var(--scrollbar-hide-easing-hiding);

  --scroll-hide-scroller-padding-top:     var(--scrollbar-hide-fade-distance);
  --scroll-hide-scroller-padding-bottom:  var(--scrollbar-hide-fade-distance);

  padding-top:            var(--scroll-hide-scroller-padding-top);
  scroll-padding-top:     var(--scroll-hide-scroller-padding-top);

  padding-bottom:         var(--scroll-hide-scroller-padding-bottom);
  scroll-padding-bottom:  var(--scroll-hide-scroller-padding-bottom);

}

///
/// Scrollbar hide: scroller element directional styles.
///
/// This uses --scrollbar-gutter to set a negative margin on the relevant edge
/// so that any scrollbar that takes up space will be hidden. This is then reset
/// when the container is hovered by the pointer or anything within it is
/// focused.
///
/// @param {String} $direction [ltr]
///   The text direction to output styles for. Must be one of 'ltr' or 'rtl'.
///
/// @require {function} scrollbar-edge-from-text-dir
///
/// @require {mixin} selector.root-conditions
///
/// @require {variable} $extra-space
///
@mixin scroller-directional($direction: ltr) {

  $scrollbar-edge: scrollbar-edge-from-text-dir($direction);

  @include selector.root-conditions((
    '[dir=#{$direction}]:not([data-scrollbar-gutter="0"])'
  ), 'html') {

    margin-#{$scrollbar-edge}: calc(
      var(--scrollbar-gutter, 0) * -1 - #{$extra-space}
    );

    transition-property: margin-#{$scrollbar-edge};

  }

}

///
/// Scrollbar hide: scroller element styles, scrollbar visible.
///
/// @require {mixin} scroller-scrollbar-visible-directional
///
@mixin scroller-scrollbar-visible {

  transition-timing-function: var(--scrollbar-hide-easing-showing);

  @include scroller-scrollbar-visible-directional(ltr);
  @include scroller-scrollbar-visible-directional(rtl);

}

///
/// Scrollbar hide: scroller element directional styles, scrollbar visible.
///
/// @param {String} $direction [ltr]
///   The text direction to output styles for. Must be one of 'ltr' or 'rtl'.
///
/// @require {function} scrollbar-edge-from-text-dir
///
/// @require {mixin} selector.root-conditions
///
@mixin scroller-scrollbar-visible-directional($direction: ltr) {

  $scrollbar-edge: scrollbar-edge-from-text-dir($direction);

  @include selector.root-conditions((
    '[dir=#{$direction}]:not([data-scrollbar-gutter="0"])'
  ), 'html') {
    margin-#{$scrollbar-edge}: 0;
  }

}

///
/// Scrollbar hide: child element base styles.
///
/// @require {mixin} child-directional
///
@mixin child {

  @include child-directional(ltr);
  @include child-directional(rtl);

  // Rather than duplicating the values from the parent, just inherit transition
  // properties.
  transition-duration:        inherit;
  transition-timing-function: inherit;

}

///
/// Scrollbar hide: child element directional styles.
///
/// This uses --scrollbar-gutter to set a negative margin on the relevant edge
/// so that any scrollbar that takes up space will be hidden. This is then reset
/// when the container is hovered by the pointer or anything within it is
/// focused.
///
/// @param {String} $direction [ltr]
///   The text direction to output styles for. Must be one of 'ltr' or 'rtl'.
///
/// @require {function} scrollbar-edge-from-text-dir
///
/// @require {mixin} selector.root-conditions
///
/// @require {variable} $extra-space
///
@mixin child-directional($direction: ltr) {

  $scrollbar-edge: scrollbar-edge-from-text-dir($direction);

  @include selector.root-conditions((
    '[dir=#{$direction}]:not([data-scrollbar-gutter="0"])'
  ), 'html') {

    padding-#{$scrollbar-edge}: calc(
      var(--scrollbar-gutter, 0) + #{$extra-space}
    );

    transition-property: padding-#{$scrollbar-edge};

  }

}

///
/// Scrollbar hide: child element styles, scrollbar visible.
///
/// @require {mixin} child-scrollbar-visible-directional
///
@mixin child-scrollbar-visible {
  @include child-scrollbar-visible-directional(ltr);
  @include child-scrollbar-visible-directional(rtl);
}

///
/// Scrollbar hide: child element directional styles, scrollbar visible.
///
/// @param {String} $direction [ltr]
///   The text direction to output styles for. Must be one of 'ltr' or 'rtl'.
///
/// @require {function} scrollbar-edge-from-text-dir
///
/// @require {mixin} selector.root-conditions
///
@mixin child-scrollbar-visible-directional($direction: ltr) {

  $scrollbar-edge: scrollbar-edge-from-text-dir($direction);

  @include selector.root-conditions((
    '[dir=#{$direction}]:not([data-scrollbar-gutter="0"])'
  ), 'html') {
    padding-#{$scrollbar-edge}: 0;
  }

}

///
/// Scrollbar hide: fade element base styles.
///
/// @param {String} $location
///   The location to place the fade element. Must be one of 'top' or 'bottom'.
///
/// @require {function} gradient
///
/// @require {mixin} colour.on-dark-scheme
///
/// @require {variable} colours.$secondary-content-background-dark
/// @require {variable} colours.$secondary-content-background-light
///
@mixin fade($location) {

  position: absolute;

  // This causes the fade element to default to display: none; if
  // --scrollbar-gutter isn't defined. This prevents the fade element being
  // placed on top of the scrollbar when JavaScript has not detected the
  // scrollbar width, either because the JavaScript is still loading or it
  // failed to be applied.
  //
  // @see https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/
  //   Could we use something like this to provide a fallback when
  //   --scrollbar-gutter isn't defined?
  display: var(--scrollbar-gutter, none);

  left:   0;
  right:  0;

  height: var(--scrollbar-hide-fade-distance);

  pointer-events: none;

  transition-duration:        var(--scrollbar-hide-transition-duration);
  transition-timing-function: var(--scrollbar-hide-easing-hiding);
  transition-property:        transform;

  @if ($location == top) {

    top: 0;

    background-image: gradient(
      bottom, colours.$secondary-content-background-light
    );

    @include colour.on-dark-scheme {
      background-image: gradient(
        bottom, colours.$secondary-content-background-dark
      );
    }

  } @else if ($location == bottom) {

    bottom: 0;

    background-image: gradient(
      top, colours.$secondary-content-background-light
    );

    @include colour.on-dark-scheme {
      background-image: gradient(
        top, colours.$secondary-content-background-dark
      );
    }

  }

}

///
/// Scrollbar hide: fade element styles, scrollbar visible.
///
/// This translates the fade element laterally to avoid overlapping the
/// scrollbar, using the same transition easing as the container.
///
/// @require {mixin} selector.root-conditions
///
/// @require {variable} $extra-space
///
@mixin fade-scrollbar-visible {

  transition-timing-function: var(--scrollbar-hide-easing-showing);

  @include selector.root-conditions((
    '[dir=ltr]:not([data-scrollbar-gutter="0"])'
  ), 'html') {
    transform: translateX(calc(
      0% - var(--scrollbar-gutter, 0) + #{$extra-space}
    ));
  }
  @include selector.root-conditions((
    '[dir=rtl]:not([data-scrollbar-gutter="0"])'
  ), 'html') {
    transform: translateX(calc(
      0% + var(--scrollbar-gutter, 0) + #{$extra-space}
    ));
  }

}
