// -----------------------------------------------------------------------------
//   Site layout - Sidebars sticky functionality
// -----------------------------------------------------------------------------

@use 'config' as layout-config; // Configure layout.
@use 'base:layout/sidebars' as layout-sidebars;

// This contains most of the layout stuff relevant to making the sidebars sticky
// on wider screens.
//
// @see _header_sticky.scss
//   Contains header sticky layout stuff on wider screens.

// Can't be :root as the sidebar mixin won't work due to root-conditions mixin
// selector rewriting.
.layout-container {
  --sticky-sidebar-top-offset:    #{layout-config.$gap};
  --sticky-sidebar-bottom-offset: #{layout-config.$gap};

  --sidebars-are-sticky: false;

  @include layout-sidebars.on-sidebar-beside-content(both) {
    --sidebars-are-sticky: true;
  }

}

.layout-sidebar-first,
.layout-sidebar-second {
  @include layout-sidebars.on-sidebar-beside-content(both) {
    position: sticky;
  }
}

.layout-sidebar-first {

  .block-system-branding-block {
    display: none;
  }

  @include layout-sidebars.on-sidebar-beside-content(both) {

    .block-system-branding-block {
      display: block;
    }

    // @supports (grid-template-columns: subgrid) {
    //   // @todo The 12.25em is a magic number that's intended to account for the
    //   //   site branding. This should be reworked so we can remove the value and
    //   //   derive it automatically from the branding.
    //   --sticky-sidebar-first-top-offset: calc(
    //     var(--sticky-sidebar-top-offset) * 2 +
    //     #{layout-config.$header-row-height} + 12.25em
    //   );
    // }

    // @supports not (grid-template-columns: subgrid) {

    //   --sticky-sidebar-first-top-offset: calc(
    //     var(--sticky-sidebar-top-offset) * 2 +
    //     #{layout-config.$header-row-height}
    //   );

    //   // This prevents the ::before pseudo-element blocking clicks to the
    //   // <header>. This is a bit simpler than messing with the z-indexes.
    //   pointer-events: none;

    //   .region-sidebar-first {
    //     pointer-events: auto;
    //   }

    // }

    // top: var(--sticky-sidebar-first-top-offset);

  }

}

.layout-sidebar-first,
.layout-sidebar-second {
  @include layout-sidebars.on-sidebar-beside-content(both) {
    top: var(--sticky-sidebar-top-offset);
  }
}

.layout-container--is-enhanced-sticky {
  @include layout-sidebars.on-sidebar-beside-content(both) {

    position: relative;

    // header[role='banner'],
    .layout-sidebar-first,
    .layout-sidebar-second {
      position: static;
      top:      0;
    }

    // header[role='banner'] {

    //   padding-bottom: 0;

    //   .region-header {
    //     position: static;
    //     top: 0;
    //   }

    // }

    // Default CSS required by the Sticky Sidebar library.
    //
    // @see https://abouolia.github.io/sticky-sidebar/#configure-your-css

    // .region-header,
    .layout-sidebar-first,
    .layout-sidebar-second {
      will-change: min-height;
    }

    // .block-system-branding-block,
    .region-sidebar-first,
    .region-sidebar-second {

      transform:    translate3d(0, 0, 0);
      will-change:  position, transform;

    }

  }
}
