<?php

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * This adds 'html__extended' as a template suggestion so that we can extend
 * html.html.twig without re-implementing the whole template.
 */
function omnipedia_site_theme_suggestions_html_alter(
  array &$suggestions, array $variables
) {
  $suggestions[] = 'html__extended';
}

/**
 * Prepares variables for HTML document templates.
 *
 * This adds the 'omnipedia_is_main_page' variable.
 *
 * Default template: html.html.twig.
 */
function omnipedia_site_preprocess_html(array &$variables) {
  $variables['omnipedia_is_main_page'] = false;

  /** @var \Drupal\Core\Routing\StackedRouteMatchInterface */
  $currentRouteMatch = \Drupal::service('current_route_match');

  // Bail if this is not a node page to avoid false positives.
  if ($currentRouteMatch->getRouteName() !== 'entity.node.canonical') {
    return;
  }

  /** @var \Drupal\omnipedia_core\Entity\NodeInterface|null */
  $node = $currentRouteMatch->getParameter('node');

  if ($node === null) {
    return;
  }

  $variables['omnipedia_is_main_page'] = $node->isMainPage();
}

/**
 * Prepares variables for the page template.
 *
 * This adds the 'omnipedia_is_search_page' variable.
 *
 * Default template: page.html.twig.
 */
function omnipedia_site_preprocess_page(array &$variables) {
  /** @var \Drupal\omnipedia_search\Service\WikiSearchInterface */
  $wikiSearch = \Drupal::service('omnipedia.wiki_search');

  /** @var bool */
  $variables['omnipedia_is_search_page'] =
    $wikiSearch->isCurrentRouteSearchPage();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This alters the submit button for the wiki search view exposed form:
 *
 * - Sets '#use_button_element' to true so that the ambientimpact_base theme
 *   replaces the <input> with a <button> element as the latter can contain
 *   markup.
 *
 * - Wraps the button content in an icon, with visually hidden text. This is
 *   dependent on the previous point.
 *
 * - Sets the 'plain-button' class on the button.
 *
 * @see ambientimpact_base/templates/form/input--button-element.html.twig
 *   Template suggestion that outputs a <button> element rather than an <input>.
 *   Also documents rationale and links.
 */
function omnipedia_site_form_views_exposed_form_alter(
  array &$form, FormStateInterface $formState, string $formId
) {
  if ($form['#id'] !== 'views-exposed-form-wiki-search-page') {
    return;
  }

  /** @var array */
  $submit = &$form['actions']['submit'];

  $submit['#use_button_element'] = true;

  $submit['content'] = [
    '#type'         => 'ambientimpact_icon',
    '#bundle'       => 'libricons',
    '#icon'         => 'loupe',
    '#text'         => $submit['#value'],
    '#textDisplay'  => 'visuallyHidden',
  ];

  $submit['#attributes']['class'][] = 'plain-button';

  // Set the HTML required attribute on the field. Note that using '#required'
  // here causes Views/Drupal to output an empty error message for some strange
  // reason when generating the form, so we're setting the attribute directly.
  // We're primarily doing this for UX reasons: so that browsers refuse to
  // submit the form if terms are empty and thus avoiding a page load, and not
  // for data validation, which must be server-side. If the browser is really
  // old and doesn't support the required attribute, users just get the empty
  // search results page.
  if (isset($form['terms']['#type'])) {
    // $form['terms']['#required'] = true;
    $form['terms']['#attributes']['required'] = 'required';
  }
}

/**
 * Prepares variables for the 'system_branding_block' block template.
 *
 * This sets the 'front_page_url' to the current date's main page, so that the
 * logo and site name links reflect the site's current state.
 *
 * This also changes the 'title' attribute on the links to 'Main Page'.
 *
 * @see \Drupal\omnipedia_block\EventSubscriber\Block\SystemBrandingBlockDateCacheEventSubscriber
 *   Alters the block build array to add Omnipedia date and main pages cache
 *   contexts and cache tags as doing so elsewhere would be too late.
 */
function omnipedia_site_preprocess_block__system_branding_block(
  array &$variables
) {
  /** @var \Drupal\omnipedia_core\Service\WikiNodeMainPageInterface */
  $wikiNodeMainPage = \Drupal::service('omnipedia.wiki_node_main_page');

  /** @var \Drupal\omnipedia_core\Service\TimelineInterface */
  $timeline = \Drupal::service('omnipedia.timeline');

  /** @var string */
  $currentDate = $timeline->getDateFormatted('current', 'storage');

  /** @var \Drupal\omnipedia_core\Entity\NodeInterface|null */
  $currentMainPage = $wikiNodeMainPage->getMainPage($currentDate);

  // Don't alter the URL if no main page was found for this date or the user
  // does not have access to said main page.
  if ($currentMainPage === null || !$currentMainPage->access('view')) {
    return;
  }

  $variables['front_page_url'] = Url::fromRoute(
    $wikiNodeMainPage->getMainPageRouteName(),
    $wikiNodeMainPage->getMainPageRouteParameters($currentDate)
  );

  foreach (['site_logo', 'site_name'] as $key) {
    $variables[$key . '_link_attributes']
      ->setAttribute('title', \t('Main Page'));
  }
}

/**
 * Prepares variables for media entities.
 *
 * This builds <track> elements for media entities that have the
 * 'field_media_video_file' field and a non-empty 'field_subtitles' field.
 *
 * This switches 'field_media_image' from 'image_caption_formatter' back to
 * 'image_formatter'.
 *
 * @todo Remove the 'field_media_image' stuff once 'image_caption_formatter' is
 *   no longer used by ambientimpact_media.
 *
 * @see \Drupal\ambientimpact_media\Plugin\Field\FieldFormatter\ImageFormatter::viewElements()
 *   'image_caption_formatter' set here.
 */
function omnipedia_site_preprocess_media(array &$variables) {

  if (
    $variables['media']->hasField('field_media_video_file') &&
    $variables['media']->hasField('field_subtitles') &&
    !$variables['media']->get('field_subtitles')->isEmpty() &&
    !$variables['media']->get('field_subtitles')->get(0)->isEmpty()
  ) {

    /** @var \Drupal\Core\Language\LanguageManagerInterface The Drupal language manager. */
    $languageManager = \Drupal::service('language_manager');

    /** @var string */
    $langCode = $variables['media']->get('field_subtitles')->getLangcode();

    /** @var string */
    $languageName = $languageManager->getLanguageName($langCode);

    /** @var \Drupal\file\FileInterface[] */
    $subtitleFileEntities = $variables['media']->get('field_subtitles')
      ->referencedEntities();

    /** @var array[] */
    $tracks = [];

    foreach ($subtitleFileEntities as $delta => $fileEntity) {
      $tracks[] = [
        '#theme'      => 'track',
        '#attributes' => new Attribute([
          'kind'    => 'subtitles',
          'src'     => $fileEntity->createFileUrl(),
          'srclang' => $langCode,
          'label'   => $languageName,
        ]),
      ];
    }

    // Add any available tracks to the 'field_media_video_file' field.
    if (!empty($tracks)) {

      foreach (Element::children(
        $variables['content']['field_media_video_file']
      ) as $key) {
        $variables['content']['field_media_video_file'][$key]['#tracks'] =
          $tracks;
      }

    }

  }

  if (
    !isset($variables['elements']['#embed']) ||
    $variables['elements']['#embed'] !== true ||
    empty($variables['content']['field_media_image'])
  ) {
    return;
  }

  $imageField = &$variables['content']['field_media_image'];

  foreach (Element::children($imageField) as $key) {
    if ($imageField[$key]['#theme'] === 'image_caption_formatter') {
      $imageField[$key]['#theme'] = 'image_formatter';
    }
  }
}

/**
 * Prepares variables for the omnipedia-header.html.twig template.
 *
 * This adds a 'button-placeholder' class to the 'menu_link' element.
 *
 * @see \Drupal\omnipedia_block\Plugin\Block\Header
 *   Used by this block.
 */
function omnipedia_site_preprocess_omnipedia_header(array &$variables) {
  $variables['menu_link']['#attributes']['class'][] = 'button-placeholder';
}

/**
 * Prepares variables for the eu_cookie_compliance_popup_info.html.twig template.
 *
 * If the 'more_info_button' variable is found, this sets the following and
 * unsets 'more_info_button' so that a link can be output instead:
 *
 * - 'privacy_policy_link_url': A \Drupal\Core\Url object pointing to the
 *   configured privacy policy URL.
 *
 * - 'privacy_policy_link_title': The text content to use for the privacy policy
 *   link. This is taken from the value of 'more_info_button'.
 *
 * - 'privacy_policy_link_attributes': A \Drupal\Core\Template\Attribute object,
 *   optionally containing 'target' => '_blank' if the privacy policy is
 *   configured to open in a new window or tab.
 *
 * @see https://www.drupal.org/project/eu_cookie_compliance/issues/3222159
 *   Issue regarding the "More info" / privacy policy button being better suited
 *   as a link for accessibility.
 */
function omnipedia_site_preprocess_eu_cookie_compliance_popup_info(
  array &$variables
) {

  if (!empty($variables['more_info_button'])) {

    /** @var \Drupal\Core\Config\ConfigFactoryInterface */
    $configFactory = \Drupal::service('config.factory');

    /** @var \Drupal\Core\Config\ImmutableConfig */
    $euCookieComplianceSettings = $configFactory
      ->get('eu_cookie_compliance.settings');

    /** @var \Drupal\Core\Template\Attribute */
    $variables['privacy_policy_link_attributes'] = new Attribute();

    if ($euCookieComplianceSettings->get('popup_link_new_window') === true) {
      $variables['privacy_policy_link_attributes']
        ->setAttribute('target', '_blank');
    }

    /** @var string */
    $variables['privacy_policy_link_title'] = $variables['more_info_button'];

    /** @var \Drupal\Core\Url */
    $variables['privacy_policy_link_url'] = Url::fromUserInput(
      $euCookieComplianceSettings->get('popup_link')
    );

    unset($variables['more_info_button']);

  }

}
