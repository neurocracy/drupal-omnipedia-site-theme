// -----------------------------------------------------------------------------
//   Site layout - Header
// -----------------------------------------------------------------------------

@use 'config' as layout-config; // Configure layout.
@use 'base:layout/sidebars' as layout-sidebars;
@use 'base:forms/search';
@use 'headroom';
@use 'sass/helpers/selector';
@use 'sass:list';
@use '../variables/general' as general-variables;

// This positions the header and primary menu region as sticky elements along
// the top of the viewport. Despite them being separate elements, generated
// content on both are used to create the illusion of a shared container on
// narrow screens.
//
// Additionally, .form--inline::before generated content on the search form is
// used to create a background along the entire width of the header, which
// allows the search field to cover the branding when the form gains focus
// without JavaScript.
//
// @see ../blocks/header.scss
//   Handles most of the inner workings of the site header element.

///
/// Header layout stacking order. Later in the list means a higher z-index.
///
$stacking-order: shadow, background, border, content;

header[role='banner'],
.region-primary-menu {
  // This takes viewport top displacement into account, if there is any, and
  // falls back to a value of 0em displacement if the custom property is not
  // defined. Note that we have to specify a unit rather than just "0" for
  // calc().
  top: calc(var(--displace-top, 0em) + #{layout-config.$gutter}) !important;
}

header[role='banner'],
.region-primary-menu,
.search-anchor {
  position: sticky;

  --headroom-translate-unpinned: calc(
    -100% - #{layout-config.$gutter * 2} - #{general-variables.$divider-thickness}
  );
}

.region-primary-menu {
  @include layout-sidebars.on-sidebar-beside-content(both) {
    // Same as above, but on wide screens.
    top: calc(var(--displace-top, 0em) + #{layout-config.$gap}) !important;

    // Because Chrome is being dumb with rounding errors on the right edge.
    width: calc(100% + #{general-variables.$divider-thickness});
  }

  --headroom-translate-unpinned: calc(
    -100% - #{layout-config.$gap * 2} - #{general-variables.$divider-thickness}
  );
}

header[role='banner'] {
  // The header is reverted to static positioning on wider screens and Headroom
  // transforms are set to zero.
  @include layout-sidebars.on-sidebar-beside-content(both) {
    position: static;

    --headroom-translate-pinned:    0;
    --headroom-translate-unpinned:  0;
  }
}

header[role='banner'],
.region-primary-menu,
.region-primary-menu .omnipedia-header__search-form .form--inline {
  // The ::before generated content provides backgrounds for the header, primary
  // menu region, and the search form. Note that in the case of the primary menu
  // region, ::before is also used for the bottom border on wider screens.
  &::before {
    content: '';

    z-index: list.index($stacking-order, background);
  }

  > * {
    position: relative;
    z-index:  list.index($stacking-order, content);
  }
}

header[role='banner']::before {
  position: absolute;

  top:      layout-config.$gutter * -1;
  bottom:   layout-config.$gutter * -1;

  @include selector.root-conditions(('[dir=ltr]'), 'html') {
    left:   layout-config.$gutter * -1;
    right:  layout-config.$header-distinct-gap * -1;
  }
  @include selector.root-conditions(('[dir=rtl]'), 'html') {
    left:   layout-config.$header-distinct-gap * -1;
    right:  layout-config.$gutter * -1;
  }

  // This has no use when the site branding is in the sidebar.
  @include layout-sidebars.on-sidebar-beside-content(both) {
    display: none;
  }
}

.region-primary-menu::before,
.region-primary-menu::after {
  @include selector.root-conditions(('[dir=ltr]'), 'html') {
    margin-right: layout-config.$gutter * -1;
  }
  @include selector.root-conditions(('[dir=rtl]'), 'html') {
    margin-left:  layout-config.$gutter * -1;
  }
}

.region-primary-menu::before {
  margin-top:     layout-config.$gutter * -1;
  margin-bottom:  layout-config.$gutter * -1;

  grid-area: menu-primary;

  @include layout-sidebars.on-sidebar-beside-content(both) {
    position: absolute;

    left:   0;
    right:  0;
    top:    layout-config.$gap * -1;
    bottom: layout-config.$gap * -1;

    margin-top:     0;
    margin-bottom:  0;

    grid-area: auto;
  }
}

.search-target {
  position: fixed;

  top:    0;
  left:   0;
  right:  0;

  // This has no use when the site branding is in the sidebar.
  @include layout-sidebars.on-sidebar-beside-content(both) {
    display: none;
  }
}

.search-anchor {
  display:  block;

  // Indicate to the header JavaScript that the anchor is visible.
  --omnipedia-search-anchor-state: visible;

  // When the search target is in fact the target in the location hash, prevent
  // any pointer events on the anchor so that the search button can be clicked/
  // tapped.
  .search-target:target + & {
    pointer-events: none;
  }

  // This has no use when the site branding is in the sidebar.
  @include layout-sidebars.on-sidebar-beside-content(both) {
    display: none;

    // Indicate to the header JavaScript that the anchor is hidden.
    --omnipedia-search-anchor-state: hidden;
  }

  // This tries to align the anchor correctly over the vertically-centred search
  // button and form. This works together with the grid-*, align-*, and
  // justify-* properties set on this element and the container overall
  // font-size.
  top: calc(var(--displace-top, 0em) + #{layout-config.$gutter} + 0.3em);

  grid-area:    menu-primary;
  align-self:   center;
  justify-self: end;

  width:  search.$button-icon-size;
  height: search.$button-icon-size;

  // @see {mixin} search-form-submit
  @include selector.root-conditions(('[dir=ltr]'), 'html') {
    margin-right: -#{search.$button-spacing};
  }
  @include selector.root-conditions(('[dir=rtl]'), 'html') {
    margin-left:  -#{search.$button-spacing};
  }

  // Double the class selector to have a higher specificity than .plain-button
  // styles.
  &#{&} {
    // Note that we're multiplying slightly larger just to prevent potential
    // tiny areas around the border of the button where rounding errors may
    // allow the pointer to briefly be considered over the button rather than
    // the anchor.
    padding: search.$button-spacing * 1.05;
  }
}

.search-target:target ~ header[role='banner'],
.search-target--form-has-focus ~ header[role='banner'] {
  // This hides the branding region when .search-target is the ID in the
  // location, i.e. the in-page anchor target.
  @include headroom.headroom-unpinned;

  // This reverts the above, making the branding always visible when the
  // branding is in the sidebar.
  @include layout-sidebars.on-sidebar-beside-content(any) {
    @include headroom.headroom-pinned;
  }
}

.omnipedia-header {
  &__current-date,
  &__menu {
    position: relative;
  }

  &__search-form#{&}__search-form { // Specificity :(.
    margin:   layout-config.$gutter * -1;
    padding:  layout-config.$gutter;

    @include layout-sidebars.on-sidebar-beside-content(any) {
      margin:   0;
      padding:  0;
    }
  }

  &__search-form {
    // We have to use clip-path rather than overflow: hidden; as otherwise
    // Firefox would scroll the container to the search field when it gains
    // focus.
    clip-path: inset(0);

    // Remove the clip-path when the site branding is in the sidebar.
    @include layout-sidebars.on-sidebar-beside-content(any) {
      clip-path: none;
    }
  }

  &__search-form .form--inline {
    display: grid;

    grid-template-columns: 1fr calc(
      #{search.$button-icon-size} + #{search.$button-spacing}
    );

    // Revert this back to the default of flexbox when the branding is in the
    // sidebar.
    @include layout-sidebars.on-sidebar-beside-content(any) {
      display: flex;
    }

    height: 100%;

    > * {
      position: relative;

      z-index: list.index($stacking-order, content);
    }
  }

  // This provides the background that covers the site branding when the search
  // field slides up into view.
  &__search-form .form--inline::before {
    content: '';

    position: absolute;

    top:    layout-config.$gutter * -1;
    bottom: layout-config.$gutter * -1;
    left:   layout-config.$gutter * -1;
    right:  layout-config.$gutter * -1;

    // Ensure that this can't be wider than the viewport. This seems to happen
    // in Chrome, but it's unclear if it's a bug with Chrome or just due to
    // different layout stuff because it doesn't support subgrid.
    max-width: 100vw;

    z-index: list.index($stacking-order, background);

    // This has no use when the site branding is in the sidebar.
    @include layout-sidebars.on-sidebar-beside-content(both) {
      display: none;
    }
  }
}

.omnipedia-header {
  // The ::before generated content provides the header bottom border on narrow
  // screens, while the ::after provides the shadow.
  &::before,
  &::after {
    content: '';

    position: absolute;

    top:    layout-config.$gutter * -1;
    bottom: layout-config.$gutter * -1;
    left:   layout-config.$gutter * -1;
    right:  layout-config.$gutter * -1;

    @include layout-sidebars.on-sidebar-beside-content(any) {
      display: none;
    }
  }

  &::before {
    z-index: list.index($stacking-order, border);
  }

  &::after {
    z-index: list.index($stacking-order, shadow);
  }
}

.region-primary-menu {
  // The ::before generated content provides the header bottom border on wider
  // screens (where sidebars are beside the content column, while the ::after
  // provides the shadow.
  @include layout-sidebars.on-sidebar-beside-content(any) {
    &::before,
    &::after {
      content: '';

      position: absolute;

      left:   0;
      right:  0;
      top:    layout-config.$gap * -1;
      bottom: layout-config.$gap * -1;
    }
  }
}
