// -----------------------------------------------------------------------------
//   Site layout - Header
// -----------------------------------------------------------------------------

// This positions the header and primary menu region as sticky elements along
// the top of the viewport. Despite them being separate elements, generated
// content on both are used to create the illusion of a shared container on
// narrow screens.
//
// Additionally, .form--inline::before generated content on the search form is
// used to create a background along the entire width of the header, which
// allows the search field to cover the branding when the form gains focus
// without JavaScript.
//
// @see ../blocks/_header.scss
//   Handles most of the inner workings of the site header element.

header[role='banner'],
.region-primary-menu {
  // This takes viewport top displacement into account, if there is any, and
  // falls back to a value of 0em displacement if the custom property is not
  // defined. Note that we have to specify a unit rather than just "0" for
  // calc().
  top: calc(var(--displace-top, 0em) + #{$layout-gutter}) !important;
}

header[role='banner'],
.region-primary-menu,
.search-anchor {
  position: sticky;

  --headroom-translate-unpinned: calc(
    -100% - #{$layout-gutter * 2} - #{$divider-thickness}
  );
}

.region-primary-menu {
  @include on-sidebar-beside-content(both) {
    // Same as above, but on wide screens.
    top: calc(var(--displace-top, 0em) + #{$layout-gap}) !important;

    // Because Chrome is being dumb with rounding errors on the right edge.
    width: calc(100% + #{$divider-thickness});
  }

  --headroom-translate-unpinned: calc(
    -100% - #{$layout-gap * 2} - #{$divider-thickness}
  );
}

// @todo Can we create explicit z-index keywords that allow layering these
//   together correctly?
header[role='banner'] {
  // This must be lower than the primary menu region so that the search form can
  // be layered on top of this when it gains focus.
  @include z-index(page-floating);
}
.region-primary-menu {
  // This must be higher than the branding region to be able to layer the search
  // form on top of it when the form gains focus.
  @include z-index(floating);
}

header[role='banner'] {
  // The header is reverted to static positioning on wider screens and Headroom
  // transforms are set to zero.
  @include on-sidebar-beside-content(both) {
    position: static;

    --headroom-translate-pinned:    0;
    --headroom-translate-unpinned:  0;
  }
}

header[role='banner'],
.region-primary-menu,
.region-primary-menu .omnipedia-header__search-form .form--inline {
  ///
  /// Local stacking order. Later in the list means a higher z-index.
  ///
  $local-stacking-order:  background, content;

  // The ::before generated content provides backgrounds for the header, primary
  // menu region, and the search form.
  &::before {
    content: '';

    z-index: index($local-stacking-order, background);

    @include set-colours($background: $background-colour-light);

    @include on-dark-colour-scheme {
      @include set-colours($background: $background-colour-dark);
    }
  }

  > * {
    position: relative;
    z-index:  index($local-stacking-order, content);
  }
}

header[role='banner']::before {
  position: absolute;

  top:      -$layout-gutter;
  bottom:   -$layout-gutter;

  @include root-conditions(('[dir=ltr]'), 'html') {
    left:   -$layout-gutter;
    right:  -$header-distinct-gap;
  }
  @include root-conditions(('[dir=rtl]'), 'html') {
    left:   -$header-distinct-gap;
    right:  -$layout-gutter;
  }

  // This has no use when the site branding is in the sidebar.
  @include on-sidebar-beside-content(both) {
    display: none;
  }
}

.region-primary-menu::before {
  margin-top:     -$layout-gutter;
  margin-bottom:  -$layout-gutter;

  @include root-conditions(('[dir=ltr]'), 'html') {
    margin-right: -$layout-gutter;
  }
  @include root-conditions(('[dir=rtl]'), 'html') {
    margin-left:  -$layout-gutter;
  }

  grid-area: menu-primary;

  @include on-sidebar-beside-content(both) {
    position: absolute;

    left:   0;
    right:  0;
    top:    -$layout-gap;
    bottom: -$layout-gap;

    margin-top:     0;
    margin-bottom:  0;

    grid-area: auto;
  }
}

.search-target {
  position: fixed;

  top:    0;
  left:   0;
  right:  0;

  // This has no use when the site branding is in the sidebar.
  @include on-sidebar-beside-content(both) {
    display: none;
  }
}

.search-anchor {
  display:  block;

  // When the search target is in fact the target in the location hash, prevent
  // any pointer events on the anchor so that the search button can be clicked/
  // tapped.
  .search-target:target + & {
    pointer-events: none;
  }

  // This has no use when the site branding is in the sidebar.
  @include on-sidebar-beside-content(both) {
    display: none;
  }

  // This tries to align the anchor correctly over the vertically-centred search
  // button and form. This works together with the grid-*, align-*, and
  // justify-* properties set on this element and the container overall
  // font-size.
  top: calc(var(--displace-top, 0em) + #{$layout-gutter} + 0.3em);

  @include z-index('floating-above');

  grid-area:    menu-primary;
  align-self:   center;
  justify-self: end;

  width:  $search-button-icon-size;
  height: $search-button-icon-size;

  // @see {mixin} search-form-submit
  @include root-conditions(('[dir=ltr]'), 'html') {
    margin-right: -#{$search-button-spacing};
  }
  @include root-conditions(('[dir=rtl]'), 'html') {
    margin-left:  -#{$search-button-spacing};
  }

  // Note that we're multiplying slightly larger just to prevent potential tiny
  // areas around the border of the button where rounding errors may allow the
  // pointer to briefly be considered over the button rather than the anchor.
  padding: $search-button-spacing * 1.05;

  @include material-ripple;

  // Remove fancy underlines as we neither need them nor do they work correctly
  // here due to the fact that they use a carefully positioned background
  // gradient.
  @if $use-fancy-link-underlines == true {
    @include remove-fancy-link-underlines;
  }
}

.search-target:target ~ header[role='banner'] {
  // This hides the branding region when .search-target is the ID in the
  // location, i.e. the in-page anchor target.
  @include headroom-unpinned;

  // This reverts the above, making the branding always visible when the
  // branding is in the sidebar.
  @include on-sidebar-beside-content(any) {
    @include headroom-pinned;
  }
}

.omnipedia-header {
  ///
  /// Local stacking order. Later in the list means a higher z-index.
  ///
  $local-stacking-order: background, content;

  &__current-date,
  &__menu {
    position: relative;
  }

  &__search-form#{&}__search-form { // Specificity :(.
    margin:   -$layout-gutter;
    padding:   $layout-gutter;

    @include on-sidebar-beside-content(any) {
      margin:   0;
      padding:  0;
    }
  }

  &__search-form {
    // We have to use clip-path rather than overflow: hidden; as otherwise
    // Firefox would scroll the container to the search field when it gains
    // focus.
    clip-path: inset(0);

    // Remove the clip-path when the site branding is in the sidebar.
    @include on-sidebar-beside-content(any) {
      clip-path: none;
    }
  }

  &__search-form .form--inline {
    display: grid;

    grid-template-columns: 1fr calc(
      #{$search-button-icon-size} + #{$search-button-spacing}
    );

    // Revert this back to the default of flexbox when the branding is in the
    // sidebar.
    @include on-sidebar-beside-content(any) {
      display: flex;
    }

    height: 100%;

    > * {
      position: relative;

      z-index: index($local-stacking-order, content);
    }
  }

  // This provides the background that covers the site branding when the search
  // field slides up into view.
  &__search-form .form--inline::before {
    content: '';

    position: absolute;

    top:    -$layout-gutter;
    bottom: -$layout-gutter;
    left:   -$layout-gutter;
    right:  -$layout-gutter;

    // Ensure that this can't be wider than the viewport. This seems to happen
    // in Chrome, but it's unclear if it's a bug with Chrome or just due to
    // different layout stuff because it doesn't support subgrid.
    max-width: 100vw;

    z-index: index($local-stacking-order, background);

    // This has no use when the site branding is in the sidebar.
    @include on-sidebar-beside-content(both) {
      display: none;
    }
  }
}
