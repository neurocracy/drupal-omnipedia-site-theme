// -----------------------------------------------------------------------------
//   Omnipedia <media-group> element stylesheet
// -----------------------------------------------------------------------------

@use '../layout/config' as layout-config; // Configure layout.
@use '../typography/config' as typography-config; // Configure typography.
@use 'base:elements/list';
@use 'base:global/content';
@use 'base:layout/vertical_spacing' as vertical-spacing;
@use '../components/card';
@use 'sass/helpers/colour';
@use 'sass/helpers/layout';
@use '../variables/colours';

.omnipedia-media-group {
  @include card.base;

  @include colour.set(
    $background: colours.$secondary-content-background-light
  );

  @include colour.on-dark-scheme {
    @include colour.set(
      $background: colours.$secondary-content-background-dark
    );
  }

  @at-root {
    // This uses the same vertical spacing as other content elements plus a bit
    // extra to attempt to align with the top of the first line of adjacent <p>
    // elements.
    @include vertical-spacing.against-previous(
      '.omnipedia-media-group',
      $spacing-small: content.$item-vertical-spacing-small +
        typography-config.$line-height-compensation,
      $spacing-large: content.$item-vertical-spacing-large +
        typography-config.$line-height-compensation
    );
  }

  &__list {

    @include list.unlisted;

    // @todo Wouldn't the layout stuff (other than the card.$padding) make more
    //   sense in omnipedia_media?

    display: flex;

    gap: card.$padding;

    &-item {
      // This uses the custom property generated by the media group element
      // plug-in to scale all items so that they all have the same height but
      // their widths vary to preserve their aspect ratios.
      flex-basis: calc(var(--media-group-item-scale, 1) * 100%);
    }

    &-item + &-item {
      margin-top: 0 !important;
    }

  }

  .omnipedia-media {
    margin-bottom: 0;
  }

  &__caption {
    @include card.caption;

    // These force the caption to wrap at the width of the thumbnails but no
    // wider, by first causing the text to wrap as small as possible so that it
    // doesn't make the box wider than the thumbnails, and then setting a
    // minimum width of 100% which increases it back up to the width of the
    // thumbnails.
    width:      min-content;
    min-width:  100%;
  }
}
